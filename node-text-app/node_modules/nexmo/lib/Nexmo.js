"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _Credentials = _interopRequireDefault(require("./Credentials"));

var _JwtGenerator = _interopRequireDefault(require("./JwtGenerator"));

var _HashGenerator = _interopRequireDefault(require("./HashGenerator"));

var _Message = _interopRequireDefault(require("./Message"));

var _Voice = _interopRequireDefault(require("./Voice"));

var _Number = _interopRequireDefault(require("./Number"));

var _Verify = _interopRequireDefault(require("./Verify"));

var _NumberInsight = _interopRequireDefault(require("./NumberInsight"));

var _App = _interopRequireDefault(require("./App"));

var _Account = _interopRequireDefault(require("./Account"));

var _CallsResource = _interopRequireDefault(require("./CallsResource"));

var _FilesResource = _interopRequireDefault(require("./FilesResource"));

var _Conversion = _interopRequireDefault(require("./Conversion"));

var _Media = _interopRequireDefault(require("./Media"));

var _Redact = _interopRequireDefault(require("./Redact"));

var _Pricing = _interopRequireDefault(require("./Pricing"));

var _HttpClient = _interopRequireDefault(require("./HttpClient"));

var _NullLogger = _interopRequireDefault(require("./NullLogger"));

var _ConsoleLogger = _interopRequireDefault(require("./ConsoleLogger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var jwtGeneratorInstance = new _JwtGenerator.default();
var hashGeneratorInstance = new _HashGenerator.default();

class Nexmo {
  /**
   * @param {Credentials} credentials - Nexmo API credentials
   * @param {string} credentials.apiKey - the Nexmo API key
   * @param {string} credentials.apiSecret - the Nexmo API secret
   * @param {Object} options - Additional options
   * @param {boolean} options.debug - `true` to turn on debug logging
   * @param {Object} options.logger - Set a custom logger.
   * @param {string} options.appendToUserAgent - A value to append to the user agent.
   *                    The value will be prefixed with a `/`
   */
  constructor(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      debug: false
    };
    this.credentials = _Credentials.default.parse(credentials);
    this.options = Object.assign({}, options); // If no logger has been supplied but debug has been set
    // default to using the ConsoleLogger

    if (!this.options.logger && this.options.debug) {
      this.options.logger = new _ConsoleLogger.default();
    } else if (!this.options.logger) {
      // Swallow the logging
      this.options.logger = new _NullLogger.default();
    }

    var userAgent = "nexmo-node/UNKNOWN node/UNKNOWN";

    try {
      var packageDetails = require(_path.default.join(__dirname, "..", "package.json"));

      userAgent = "nexmo-node/".concat(packageDetails.version, " node/").concat(process.version.replace("v", ""));
    } catch (e) {
      console.warn("Could not load package details");
    }

    this.options.userAgent = userAgent;

    if (this.options.appendToUserAgent) {
      this.options.userAgent += " ".concat(this.options.appendToUserAgent);
    } // This is legacy, everything should use rest or api going forward


    this.options.httpClient = new _HttpClient.default(Object.assign({
      host: this.options.restHost || "rest.nexmo.com"
    }, this.options), this.credentials); // We have two different hosts, so we use two different HttpClients

    this.options.api = new _HttpClient.default(Object.assign({
      host: this.options.apiHost || "api.nexmo.com"
    }, this.options), this.credentials);
    this.options.rest = new _HttpClient.default(Object.assign({
      host: this.options.restHost || "rest.nexmo.com"
    }, this.options), this.credentials);
    this.message = new _Message.default(this.credentials, this.options);
    this.voice = new _Voice.default(this.credentials, this.options);
    this.number = new _Number.default(this.credentials, this.options);
    this.verify = new _Verify.default(this.credentials, this.options);
    this.numberInsight = new _NumberInsight.default(this.credentials, this.options);
    this.applications = new _App.default(this.credentials, this.options);
    this.account = new _Account.default(this.credentials, this.options);
    this.calls = new _CallsResource.default(this.credentials, this.options);
    this.files = new _FilesResource.default(this.credentials, this.options);
    this.conversion = new _Conversion.default(this.credentials, this.options);
    this.media = new _Media.default(this.credentials, this.options);
    this.redact = new _Redact.default(this.credentials, this.options);
    this.pricing = new _Pricing.default(this.credentials, this.options);
    /**
     * @deprecated Please use nexmo.applications
     */

    this.app = this.applications;
  }
  /**
   * Generate a JSON Web Token (JWT).
   *
   * The private key used upon Nexmo instance construction will be used to sign
   * the JWT. The application_id you used upon Nexmo instance creation will be
   * included in the claims for the JWT, however this can be overridden by passing
   * an application_id as part of the claims.
   *
   * @param {Object} claims - name/value pair claims to sign within the JWT
   *
   * @returns {String} the generated token
   */


  generateJwt() {
    var claims = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (claims.application_id === undefined) {
      claims.application_id = this.credentials.applicationId;
    }

    return Nexmo.generateJwt(this.credentials.privateKey, claims);
  }
  /**
   * Generate a Signature Hash.
   *
   * @param {Object} params - params to generate hash from
   *
   * @returns {String} the generated token
   */


  generateSignature(params) {
    return this.credentials.generateSignature(params);
  }

}
/**
 * Generate a JSON Web Token (JWT).
 *
 * @param {String|Buffer} privateKey - the path to the private key certificate
 *          to be used when signing the claims.
 * @param {Object} claims - name/value pair claims to sign within the JWT
 *
 * @returns {String} the generated token
 */


Nexmo.generateJwt = (privateKey, claims) => {
  if (!(privateKey instanceof Buffer)) {
    if (!_fs.default.existsSync(privateKey)) {
      throw new Error("File \"".concat(privateKey, "\" not found."));
    } else {
      privateKey = _fs.default.readFileSync(privateKey);
    }
  }

  return jwtGeneratorInstance.generate(privateKey, claims);
};
/**
 * Generate a Signature Hash.
 *
 * @param {String} method - the method to be used when creating the hash
 * @param {String} secret - the secret to be used when creating the hash
 * @param {Object} params - params to generate hash from
 *
 * @returns {String} the generated token
 */


Nexmo.generateSignature = (method, secret, params) => {
  return hashGeneratorInstance.generate(method, secret, params);
};

var _default = Nexmo;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9OZXhtby5qcyJdLCJuYW1lcyI6WyJqd3RHZW5lcmF0b3JJbnN0YW5jZSIsIkp3dEdlbmVyYXRvciIsImhhc2hHZW5lcmF0b3JJbnN0YW5jZSIsIkhhc2hHZW5lcmF0b3IiLCJOZXhtbyIsImNvbnN0cnVjdG9yIiwiY3JlZGVudGlhbHMiLCJvcHRpb25zIiwiZGVidWciLCJDcmVkZW50aWFscyIsInBhcnNlIiwiT2JqZWN0IiwiYXNzaWduIiwibG9nZ2VyIiwiQ29uc29sZUxvZ2dlciIsIk51bGxMb2dnZXIiLCJ1c2VyQWdlbnQiLCJwYWNrYWdlRGV0YWlscyIsInJlcXVpcmUiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsInZlcnNpb24iLCJwcm9jZXNzIiwicmVwbGFjZSIsImUiLCJjb25zb2xlIiwid2FybiIsImFwcGVuZFRvVXNlckFnZW50IiwiaHR0cENsaWVudCIsIkh0dHBDbGllbnQiLCJob3N0IiwicmVzdEhvc3QiLCJhcGkiLCJhcGlIb3N0IiwicmVzdCIsIm1lc3NhZ2UiLCJNZXNzYWdlIiwidm9pY2UiLCJWb2ljZSIsIm51bWJlciIsIk51bWJlciIsInZlcmlmeSIsIlZlcmlmeSIsIm51bWJlckluc2lnaHQiLCJOdW1iZXJJbnNpZ2h0IiwiYXBwbGljYXRpb25zIiwiQXBwIiwiYWNjb3VudCIsIkFjY291bnQiLCJjYWxscyIsIkNhbGxzUmVzb3VyY2UiLCJmaWxlcyIsIkZpbGVzUmVzb3VyY2UiLCJjb252ZXJzaW9uIiwiQ29udmVyc2lvbiIsIm1lZGlhIiwiTWVkaWEiLCJyZWRhY3QiLCJSZWRhY3QiLCJwcmljaW5nIiwiUHJpY2luZyIsImFwcCIsImdlbmVyYXRlSnd0IiwiY2xhaW1zIiwiYXBwbGljYXRpb25faWQiLCJ1bmRlZmluZWQiLCJhcHBsaWNhdGlvbklkIiwicHJpdmF0ZUtleSIsImdlbmVyYXRlU2lnbmF0dXJlIiwicGFyYW1zIiwiQnVmZmVyIiwiZnMiLCJleGlzdHNTeW5jIiwiRXJyb3IiLCJyZWFkRmlsZVN5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Ozs7Ozs7QUFTQTVELEtBQUssQ0FBQ2lFLGlCQUFOLEdBQTBCLENBQUNRLE1BQUQsRUFBU0MsTUFBVCxFQUFpQlIsTUFBakIsS0FBNEI7QUFDcEQsU0FBT3BFLHFCQUFxQixDQUFDMEUsUUFBdEIsQ0FBK0JDLE1BQS9CLEVBQXVDQyxNQUF2QyxFQUErQ1IsTUFBL0MsQ0FBUDtBQUNELENBRkQ7O2VBSWVsRSxLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcblxuaW1wb3J0IENyZWRlbnRpYWxzIGZyb20gXCIuL0NyZWRlbnRpYWxzXCI7XG5pbXBvcnQgSnd0R2VuZXJhdG9yIGZyb20gXCIuL0p3dEdlbmVyYXRvclwiO1xuaW1wb3J0IEhhc2hHZW5lcmF0b3IgZnJvbSBcIi4vSGFzaEdlbmVyYXRvclwiO1xuaW1wb3J0IE1lc3NhZ2UgZnJvbSBcIi4vTWVzc2FnZVwiO1xuaW1wb3J0IFZvaWNlIGZyb20gXCIuL1ZvaWNlXCI7XG5pbXBvcnQgTnVtYmVyIGZyb20gXCIuL051bWJlclwiO1xuaW1wb3J0IFZlcmlmeSBmcm9tIFwiLi9WZXJpZnlcIjtcbmltcG9ydCBOdW1iZXJJbnNpZ2h0IGZyb20gXCIuL051bWJlckluc2lnaHRcIjtcbmltcG9ydCBBcHAgZnJvbSBcIi4vQXBwXCI7XG5pbXBvcnQgQWNjb3VudCBmcm9tIFwiLi9BY2NvdW50XCI7XG5pbXBvcnQgQ2FsbHNSZXNvdXJjZSBmcm9tIFwiLi9DYWxsc1Jlc291cmNlXCI7XG5pbXBvcnQgRmlsZXNSZXNvdXJjZSBmcm9tIFwiLi9GaWxlc1Jlc291cmNlXCI7XG5pbXBvcnQgQ29udmVyc2lvbiBmcm9tIFwiLi9Db252ZXJzaW9uXCI7XG5pbXBvcnQgTWVkaWEgZnJvbSBcIi4vTWVkaWFcIjtcbmltcG9ydCBSZWRhY3QgZnJvbSBcIi4vUmVkYWN0XCI7XG5pbXBvcnQgUHJpY2luZyBmcm9tIFwiLi9QcmljaW5nXCI7XG5pbXBvcnQgSHR0cENsaWVudCBmcm9tIFwiLi9IdHRwQ2xpZW50XCI7XG5pbXBvcnQgTnVsbExvZ2dlciBmcm9tIFwiLi9OdWxsTG9nZ2VyXCI7XG5pbXBvcnQgQ29uc29sZUxvZ2dlciBmcm9tIFwiLi9Db25zb2xlTG9nZ2VyXCI7XG5cbmNvbnN0IGp3dEdlbmVyYXRvckluc3RhbmNlID0gbmV3IEp3dEdlbmVyYXRvcigpO1xuY29uc3QgaGFzaEdlbmVyYXRvckluc3RhbmNlID0gbmV3IEhhc2hHZW5lcmF0b3IoKTtcblxuY2xhc3MgTmV4bW8ge1xuICAvKipcbiAgICogQHBhcmFtIHtDcmVkZW50aWFsc30gY3JlZGVudGlhbHMgLSBOZXhtbyBBUEkgY3JlZGVudGlhbHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNyZWRlbnRpYWxzLmFwaUtleSAtIHRoZSBOZXhtbyBBUEkga2V5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjcmVkZW50aWFscy5hcGlTZWNyZXQgLSB0aGUgTmV4bW8gQVBJIHNlY3JldFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMuZGVidWcgLSBgdHJ1ZWAgdG8gdHVybiBvbiBkZWJ1ZyBsb2dnaW5nXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLmxvZ2dlciAtIFNldCBhIGN1c3RvbSBsb2dnZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmFwcGVuZFRvVXNlckFnZW50IC0gQSB2YWx1ZSB0byBhcHBlbmQgdG8gdGhlIHVzZXIgYWdlbnQuXG4gICAqICAgICAgICAgICAgICAgICAgICBUaGUgdmFsdWUgd2lsbCBiZSBwcmVmaXhlZCB3aXRoIGEgYC9gXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjcmVkZW50aWFscywgb3B0aW9ucyA9IHsgZGVidWc6IGZhbHNlIH0pIHtcbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gQ3JlZGVudGlhbHMucGFyc2UoY3JlZGVudGlhbHMpO1xuICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuXG4gICAgLy8gSWYgbm8gbG9nZ2VyIGhhcyBiZWVuIHN1cHBsaWVkIGJ1dCBkZWJ1ZyBoYXMgYmVlbiBzZXRcbiAgICAvLyBkZWZhdWx0IHRvIHVzaW5nIHRoZSBDb25zb2xlTG9nZ2VyXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubG9nZ2VyICYmIHRoaXMub3B0aW9ucy5kZWJ1Zykge1xuICAgICAgdGhpcy5vcHRpb25zLmxvZ2dlciA9IG5ldyBDb25zb2xlTG9nZ2VyKCk7XG4gICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLmxvZ2dlcikge1xuICAgICAgLy8gU3dhbGxvdyB0aGUgbG9nZ2luZ1xuICAgICAgdGhpcy5vcHRpb25zLmxvZ2dlciA9IG5ldyBOdWxsTG9nZ2VyKCk7XG4gICAgfVxuXG4gICAgbGV0IHVzZXJBZ2VudCA9IFwibmV4bW8tbm9kZS9VTktOT1dOIG5vZGUvVU5LTk9XTlwiO1xuICAgIHRyeSB7XG4gICAgICB2YXIgcGFja2FnZURldGFpbHMgPSByZXF1aXJlKHBhdGguam9pbihfX2Rpcm5hbWUsIFwiLi5cIiwgXCJwYWNrYWdlLmpzb25cIikpO1xuICAgICAgdXNlckFnZW50ID0gYG5leG1vLW5vZGUvJHtcbiAgICAgICAgcGFja2FnZURldGFpbHMudmVyc2lvblxuICAgICAgfSBub2RlLyR7cHJvY2Vzcy52ZXJzaW9uLnJlcGxhY2UoXCJ2XCIsIFwiXCIpfWA7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS53YXJuKFwiQ291bGQgbm90IGxvYWQgcGFja2FnZSBkZXRhaWxzXCIpO1xuICAgIH1cbiAgICB0aGlzLm9wdGlvbnMudXNlckFnZW50ID0gdXNlckFnZW50O1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYXBwZW5kVG9Vc2VyQWdlbnQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy51c2VyQWdlbnQgKz0gYCAke3RoaXMub3B0aW9ucy5hcHBlbmRUb1VzZXJBZ2VudH1gO1xuICAgIH1cblxuICAgIC8vIFRoaXMgaXMgbGVnYWN5LCBldmVyeXRoaW5nIHNob3VsZCB1c2UgcmVzdCBvciBhcGkgZ29pbmcgZm9yd2FyZFxuICAgIHRoaXMub3B0aW9ucy5odHRwQ2xpZW50ID0gbmV3IEh0dHBDbGllbnQoXG4gICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICB7IGhvc3Q6IHRoaXMub3B0aW9ucy5yZXN0SG9zdCB8fCBcInJlc3QubmV4bW8uY29tXCIgfSxcbiAgICAgICAgdGhpcy5vcHRpb25zXG4gICAgICApLFxuICAgICAgdGhpcy5jcmVkZW50aWFsc1xuICAgICk7XG5cbiAgICAvLyBXZSBoYXZlIHR3byBkaWZmZXJlbnQgaG9zdHMsIHNvIHdlIHVzZSB0d28gZGlmZmVyZW50IEh0dHBDbGllbnRzXG4gICAgdGhpcy5vcHRpb25zLmFwaSA9IG5ldyBIdHRwQ2xpZW50KFxuICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgeyBob3N0OiB0aGlzLm9wdGlvbnMuYXBpSG9zdCB8fCBcImFwaS5uZXhtby5jb21cIiB9LFxuICAgICAgICB0aGlzLm9wdGlvbnNcbiAgICAgICksXG4gICAgICB0aGlzLmNyZWRlbnRpYWxzXG4gICAgKTtcbiAgICB0aGlzLm9wdGlvbnMucmVzdCA9IG5ldyBIdHRwQ2xpZW50KFxuICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgeyBob3N0OiB0aGlzLm9wdGlvbnMucmVzdEhvc3QgfHwgXCJyZXN0Lm5leG1vLmNvbVwiIH0sXG4gICAgICAgIHRoaXMub3B0aW9uc1xuICAgICAgKSxcbiAgICAgIHRoaXMuY3JlZGVudGlhbHNcbiAgICApO1xuXG4gICAgdGhpcy5tZXNzYWdlID0gbmV3IE1lc3NhZ2UodGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLnZvaWNlID0gbmV3IFZvaWNlKHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5udW1iZXIgPSBuZXcgTnVtYmVyKHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy52ZXJpZnkgPSBuZXcgVmVyaWZ5KHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5udW1iZXJJbnNpZ2h0ID0gbmV3IE51bWJlckluc2lnaHQodGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmFwcGxpY2F0aW9ucyA9IG5ldyBBcHAodGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmFjY291bnQgPSBuZXcgQWNjb3VudCh0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuY2FsbHMgPSBuZXcgQ2FsbHNSZXNvdXJjZSh0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuZmlsZXMgPSBuZXcgRmlsZXNSZXNvdXJjZSh0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuY29udmVyc2lvbiA9IG5ldyBDb252ZXJzaW9uKHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5tZWRpYSA9IG5ldyBNZWRpYSh0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMucmVkYWN0ID0gbmV3IFJlZGFjdCh0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMucHJpY2luZyA9IG5ldyBQcmljaW5nKHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIG5leG1vLmFwcGxpY2F0aW9uc1xuICAgICAqL1xuICAgIHRoaXMuYXBwID0gdGhpcy5hcHBsaWNhdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSBKU09OIFdlYiBUb2tlbiAoSldUKS5cbiAgICpcbiAgICogVGhlIHByaXZhdGUga2V5IHVzZWQgdXBvbiBOZXhtbyBpbnN0YW5jZSBjb25zdHJ1Y3Rpb24gd2lsbCBiZSB1c2VkIHRvIHNpZ25cbiAgICogdGhlIEpXVC4gVGhlIGFwcGxpY2F0aW9uX2lkIHlvdSB1c2VkIHVwb24gTmV4bW8gaW5zdGFuY2UgY3JlYXRpb24gd2lsbCBiZVxuICAgKiBpbmNsdWRlZCBpbiB0aGUgY2xhaW1zIGZvciB0aGUgSldULCBob3dldmVyIHRoaXMgY2FuIGJlIG92ZXJyaWRkZW4gYnkgcGFzc2luZ1xuICAgKiBhbiBhcHBsaWNhdGlvbl9pZCBhcyBwYXJ0IG9mIHRoZSBjbGFpbXMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjbGFpbXMgLSBuYW1lL3ZhbHVlIHBhaXIgY2xhaW1zIHRvIHNpZ24gd2l0aGluIHRoZSBKV1RcbiAgICpcbiAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGdlbmVyYXRlZCB0b2tlblxuICAgKi9cblxuICBnZW5lcmF0ZUp3dChjbGFpbXMgPSB7fSkge1xuICAgIGlmIChjbGFpbXMuYXBwbGljYXRpb25faWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xhaW1zLmFwcGxpY2F0aW9uX2lkID0gdGhpcy5jcmVkZW50aWFscy5hcHBsaWNhdGlvbklkO1xuICAgIH1cbiAgICByZXR1cm4gTmV4bW8uZ2VuZXJhdGVKd3QodGhpcy5jcmVkZW50aWFscy5wcml2YXRlS2V5LCBjbGFpbXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgU2lnbmF0dXJlIEhhc2guXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBwYXJhbXMgdG8gZ2VuZXJhdGUgaGFzaCBmcm9tXG4gICAqXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBnZW5lcmF0ZWQgdG9rZW5cbiAgICovXG4gIGdlbmVyYXRlU2lnbmF0dXJlKHBhcmFtcykge1xuICAgIHJldHVybiB0aGlzLmNyZWRlbnRpYWxzLmdlbmVyYXRlU2lnbmF0dXJlKHBhcmFtcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIEpTT04gV2ViIFRva2VuIChKV1QpLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEJ1ZmZlcn0gcHJpdmF0ZUtleSAtIHRoZSBwYXRoIHRvIHRoZSBwcml2YXRlIGtleSBjZXJ0aWZpY2F0ZVxuICogICAgICAgICAgdG8gYmUgdXNlZCB3aGVuIHNpZ25pbmcgdGhlIGNsYWltcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjbGFpbXMgLSBuYW1lL3ZhbHVlIHBhaXIgY2xhaW1zIHRvIHNpZ24gd2l0aGluIHRoZSBKV1RcbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZ2VuZXJhdGVkIHRva2VuXG4gKi9cbk5leG1vLmdlbmVyYXRlSnd0ID0gKHByaXZhdGVLZXksIGNsYWltcykgPT4ge1xuICBpZiAoIShwcml2YXRlS2V5IGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhwcml2YXRlS2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaWxlIFwiJHtwcml2YXRlS2V5fVwiIG5vdCBmb3VuZC5gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJpdmF0ZUtleSA9IGZzLnJlYWRGaWxlU3luYyhwcml2YXRlS2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGp3dEdlbmVyYXRvckluc3RhbmNlLmdlbmVyYXRlKHByaXZhdGVLZXksIGNsYWltcyk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgU2lnbmF0dXJlIEhhc2guXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCAtIHRoZSBtZXRob2QgdG8gYmUgdXNlZCB3aGVuIGNyZWF0aW5nIHRoZSBoYXNoXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VjcmV0IC0gdGhlIHNlY3JldCB0byBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgdGhlIGhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBwYXJhbXMgdG8gZ2VuZXJhdGUgaGFzaCBmcm9tXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGdlbmVyYXRlZCB0b2tlblxuICovXG5OZXhtby5nZW5lcmF0ZVNpZ25hdHVyZSA9IChtZXRob2QsIHNlY3JldCwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBoYXNoR2VuZXJhdG9ySW5zdGFuY2UuZ2VuZXJhdGUobWV0aG9kLCBzZWNyZXQsIHBhcmFtcyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBOZXhtbztcbiJdfQ==