"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var fs = require("fs");

class FilesResource {
  /**
   * The path to the `calls` resource.
   */
  static get PATH() {
    return "/v1/files";
  }
  /**
   * Creates a new FilesResource.
   *
   * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.
   * @param {Object} options - additional options for the class.
   */


  constructor(creds, options) {
    this.creds = creds;
    this.options = options;
  }
  /**
   * Get stream for a remote File
   *
   * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file
   * @param {function} callback - function to be called when the request completes.
   */


  get(fileIdOrUrl, callback) {
    if (!fileIdOrUrl) {
      throw new Error('"fileIdOrUrl" is a required parameter');
    }

    fileIdOrUrl = fileIdOrUrl.split("/").pop(-1);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: "".concat(FilesResource.PATH, "/").concat(fileIdOrUrl),
      method: "GET",
      headers: {
        "Content-Type": "application/octet-stream",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Save remote File locally
   *
   * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file
   * @param {string} [file] - Filename or file descriptor
   * @param {function} callback - function to be called when the request completes.
   */


  save(fileIdOrUrl, file, callback) {
    this.get(fileIdOrUrl, (error, data) => {
      if (error) {
        callback(error, null);
      } else {
        this.__storeFile(data, file, callback);
      }
    });
  }

  __storeFile(data, file, callback) {
    fs.writeFile(file, data, error => {
      if (error) {
        callback(error, null);
      } else {
        callback(null, file);
      }
    });
  }

}

var _default = FilesResource;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9GaWxlc1Jlc291cmNlLmpzIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsIkZpbGVzUmVzb3VyY2UiLCJQQVRIIiwiY29uc3RydWN0b3IiLCJjcmVkcyIsIm9wdGlvbnMiLCJnZXQiLCJmaWxlSWRPclVybCIsImNhbGxiYWNrIiwiRXJyb3IiLCJzcGxpdCIsInBvcCIsImNvbmZpZyIsImhvc3QiLCJhcGlIb3N0IiwicGF0aCIsIm1ldGhvZCIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwiZ2VuZXJhdGVKd3QiLCJodHRwQ2xpZW50IiwicmVxdWVzdCIsInNhdmUiLCJmaWxlIiwiZXJyb3IiLCJkYXRhIiwiX19zdG9yZUZpbGUiLCJ3cml0ZUZpbGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBRUEsSUFBSUEsRUFBRSxHQUFHQyxPQUFPLENBQUMsSUFBRCxDQUFoQjs7QUFFQSxNQUFNQyxhQUFOLENBQW9CO0FBQ2xCOzs7QUFHQSxhQUFXQyxJQUFYLEdBQWtCO0FBQ2hCLFdBQU8sV0FBUDtBQUNEO0FBRUQ7Ozs7Ozs7O0FBTUFDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRQyxPQUFSLEVBQWlCO0FBQzFCLFNBQUtELEtBQUwsR0FBYUEsS0FBYjtBQUNBLFNBQUtDLE9BQUwsR0FBZUEsT0FBZjtBQUNEO0FBRUQ7Ozs7Ozs7O0FBTUFDLEVBQUFBLEdBQUcsQ0FBQ0MsV0FBRCxFQUFjQyxRQUFkLEVBQXdCO0FBQ3pCLFFBQUksQ0FBQ0QsV0FBTCxFQUFrQjtBQUNoQixZQUFNLElBQUlFLEtBQUosQ0FBVSx1Q0FBVixDQUFOO0FBQ0Q7O0FBRURGLElBQUFBLFdBQVcsR0FBR0EsV0FBVyxDQUFDRyxLQUFaLENBQWtCLEdBQWxCLEVBQXVCQyxHQUF2QixDQUEyQixDQUFDLENBQTVCLENBQWQ7QUFFQSxRQUFJQyxNQUFNLEdBQUc7QUFDWEMsTUFBQUEsSUFBSSxFQUFFLEtBQUtSLE9BQUwsQ0FBYVMsT0FBYixJQUF3QixlQURuQjtBQUVYQyxNQUFBQSxJQUFJLFlBQUtkLGFBQWEsQ0FBQ0MsSUFBbkIsY0FBMkJLLFdBQTNCLENBRk87QUFHWFMsTUFBQUEsTUFBTSxFQUFFLEtBSEc7QUFJWEMsTUFBQUEsT0FBTyxFQUFFO0FBQ1Asd0JBQWdCLDBCQURUO0FBRVBDLFFBQUFBLGFBQWEsbUJBQVksS0FBS2QsS0FBTCxDQUFXZSxXQUFYLEVBQVo7QUFGTjtBQUpFLEtBQWI7QUFVQSxTQUFLZCxPQUFMLENBQWFlLFVBQWIsQ0FBd0JDLE9BQXhCLENBQWdDVCxNQUFoQyxFQUF3Q0osUUFBeEM7QUFDRDtBQUVEOzs7Ozs7Ozs7QUFPQWMsRUFBQUEsSUFBSSxDQUFDZixXQUFELEVBQWNnQixJQUFkLEVBQW9CZixRQUFwQixFQUE4QjtBQUNoQyxTQUFLRixHQUFMLENBQVNDLFdBQVQsRUFBc0IsQ0FBQ2lCLEtBQUQsRUFBUUMsSUFBUixLQUFpQjtBQUNyQyxVQUFJRCxLQUFKLEVBQVc7QUFDVGhCLFFBQUFBLFFBQVEsQ0FBQ2dCLEtBQUQsRUFBUSxJQUFSLENBQVI7QUFDRCxPQUZELE1BRU87QUFDTCxhQUFLRSxXQUFMLENBQWlCRCxJQUFqQixFQUF1QkYsSUFBdkIsRUFBNkJmLFFBQTdCO0FBQ0Q7QUFDRixLQU5EO0FBT0Q7O0FBRURrQixFQUFBQSxXQUFXLENBQUNELElBQUQsRUFBT0YsSUFBUCxFQUFhZixRQUFiLEVBQXVCO0FBQ2hDVCxJQUFBQSxFQUFFLENBQUM0QixTQUFILENBQWFKLElBQWIsRUFBbUJFLElBQW5CLEVBQXlCRCxLQUFLLElBQUk7QUFDaEMsVUFBSUEsS0FBSixFQUFXO0FBQ1RoQixRQUFBQSxRQUFRLENBQUNnQixLQUFELEVBQVEsSUFBUixDQUFSO0FBQ0QsT0FGRCxNQUVPO0FBQ0xoQixRQUFBQSxRQUFRLENBQUMsSUFBRCxFQUFPZSxJQUFQLENBQVI7QUFDRDtBQUNGLEtBTkQ7QUFPRDs7QUF0RWlCOztlQXlFTHRCLGEiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGZzID0gcmVxdWlyZShcImZzXCIpO1xuXG5jbGFzcyBGaWxlc1Jlc291cmNlIHtcbiAgLyoqXG4gICAqIFRoZSBwYXRoIHRvIHRoZSBgY2FsbHNgIHJlc291cmNlLlxuICAgKi9cbiAgc3RhdGljIGdldCBQQVRIKCkge1xuICAgIHJldHVybiBcIi92MS9maWxlc1wiO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgRmlsZXNSZXNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIHtDcmVkZW50aWFsc30gY3JlZHMgLSBDcmVkZW50aWFscyB1c2VkIHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgTmV4bW8gQVBJLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGFkZGl0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIGNsYXNzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY3JlZHMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmNyZWRzID0gY3JlZHM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc3RyZWFtIGZvciBhIHJlbW90ZSBGaWxlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZmlsZUlkT3JVcmxdIC0gVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9yIFVSTCBmb3IgdGhlIGZpbGVcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBjb21wbGV0ZXMuXG4gICAqL1xuICBnZXQoZmlsZUlkT3JVcmwsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFmaWxlSWRPclVybCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcImZpbGVJZE9yVXJsXCIgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXInKTtcbiAgICB9XG5cbiAgICBmaWxlSWRPclVybCA9IGZpbGVJZE9yVXJsLnNwbGl0KFwiL1wiKS5wb3AoLTEpO1xuXG4gICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgIGhvc3Q6IHRoaXMub3B0aW9ucy5hcGlIb3N0IHx8IFwiYXBpLm5leG1vLmNvbVwiLFxuICAgICAgcGF0aDogYCR7RmlsZXNSZXNvdXJjZS5QQVRIfS8ke2ZpbGVJZE9yVXJsfWAsXG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIsXG4gICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLmNyZWRzLmdlbmVyYXRlSnd0KCl9YFxuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm9wdGlvbnMuaHR0cENsaWVudC5yZXF1ZXN0KGNvbmZpZywgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhdmUgcmVtb3RlIEZpbGUgbG9jYWxseVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2ZpbGVJZE9yVXJsXSAtIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvciBVUkwgZm9yIHRoZSBmaWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZmlsZV0gLSBGaWxlbmFtZSBvciBmaWxlIGRlc2NyaXB0b3JcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBjb21wbGV0ZXMuXG4gICAqL1xuICBzYXZlKGZpbGVJZE9yVXJsLCBmaWxlLCBjYWxsYmFjaykge1xuICAgIHRoaXMuZ2V0KGZpbGVJZE9yVXJsLCAoZXJyb3IsIGRhdGEpID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9fc3RvcmVGaWxlKGRhdGEsIGZpbGUsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIF9fc3RvcmVGaWxlKGRhdGEsIGZpbGUsIGNhbGxiYWNrKSB7XG4gICAgZnMud3JpdGVGaWxlKGZpbGUsIGRhdGEsIGVycm9yID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBmaWxlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGaWxlc1Jlc291cmNlO1xuIl19