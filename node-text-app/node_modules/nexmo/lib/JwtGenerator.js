"use strict";

var _uuid = _interopRequireDefault(require("uuid"));

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class JwtGenerator {
  /**
   * Generate a JSON Web Token (JWT).
   *
   * @param {Buffer} cert - the private key certificate to be used when signing
   * the claims.
   * @param {Object} claims - additional claims to include within the generated
   * JWT.
   *
   * @returns {String} the generated token
   */
  generate(cert) {
    var claims = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!(cert instanceof Buffer)) {
      throw new Error("cert must be of type Buffer");
    }

    if (typeof claims !== "object") {
      throw new Error("claims must be of type object");
    }

    var toSign = {
      iat: claims.issuedAt || parseInt(Date.now() / 1000, 10),
      jti: claims.jti || _uuid.default.v1()
    };
    Object.keys(claims).forEach(key => {
      toSign[key] = claims[key];
    });

    var token = _jsonwebtoken.default.sign(toSign, cert, {
      algorithm: "RS256"
    });

    return token;
  }

}

module.exports = JwtGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Kd3RHZW5lcmF0b3IuanMiXSwibmFtZXMiOlsiSnd0R2VuZXJhdG9yIiwiZ2VuZXJhdGUiLCJjZXJ0IiwiY2xhaW1zIiwiQnVmZmVyIiwiRXJyb3IiLCJ0b1NpZ24iLCJpYXQiLCJpc3N1ZWRBdCIsInBhcnNlSW50IiwiRGF0ZSIsIm5vdyIsImp0aSIsInV1aWQiLCJ2MSIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwidG9rZW4iLCJqd3QiLCJzaWduIiwiYWxnb3JpdGhtIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7OztBQUVBLE1BQU1BLFlBQU4sQ0FBbUI7QUFDakI7Ozs7Ozs7Ozs7QUFVQUMsRUFBQUEsUUFBUSxDQUFDQyxJQUFELEVBQW9CO0FBQUEsUUFBYkMsTUFBYSx1RUFBSixFQUFJOztBQUMxQixRQUFJLEVBQUVELElBQUksWUFBWUUsTUFBbEIsQ0FBSixFQUErQjtBQUM3QixZQUFNLElBQUlDLEtBQUosQ0FBVSw2QkFBVixDQUFOO0FBQ0Q7O0FBQ0QsUUFBSSxPQUFPRixNQUFQLEtBQWtCLFFBQXRCLEVBQWdDO0FBQzlCLFlBQU0sSUFBSUUsS0FBSixDQUFVLCtCQUFWLENBQU47QUFDRDs7QUFFRCxRQUFJQyxNQUFNLEdBQUc7QUFDWEMsTUFBQUEsR0FBRyxFQUFFSixNQUFNLENBQUNLLFFBQVAsSUFBbUJDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDQyxHQUFMLEtBQWEsSUFBZCxFQUFvQixFQUFwQixDQURyQjtBQUVYQyxNQUFBQSxHQUFHLEVBQUVULE1BQU0sQ0FBQ1MsR0FBUCxJQUFjQyxjQUFLQyxFQUFMO0FBRlIsS0FBYjtBQUlBQyxJQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWWIsTUFBWixFQUFvQmMsT0FBcEIsQ0FBNEJDLEdBQUcsSUFBSTtBQUNqQ1osTUFBQUEsTUFBTSxDQUFDWSxHQUFELENBQU4sR0FBY2YsTUFBTSxDQUFDZSxHQUFELENBQXBCO0FBQ0QsS0FGRDs7QUFJQSxRQUFJQyxLQUFLLEdBQUdDLHNCQUFJQyxJQUFKLENBQVNmLE1BQVQsRUFBaUJKLElBQWpCLEVBQXVCO0FBQUVvQixNQUFBQSxTQUFTLEVBQUU7QUFBYixLQUF2QixDQUFaOztBQUNBLFdBQU9ILEtBQVA7QUFDRDs7QUE3QmdCOztBQWdDbkJJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhCLFlBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHV1aWQgZnJvbSBcInV1aWRcIjtcbmltcG9ydCBqd3QgZnJvbSBcImpzb253ZWJ0b2tlblwiO1xuXG5jbGFzcyBKd3RHZW5lcmF0b3Ige1xuICAvKipcbiAgICogR2VuZXJhdGUgYSBKU09OIFdlYiBUb2tlbiAoSldUKS5cbiAgICpcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGNlcnQgLSB0aGUgcHJpdmF0ZSBrZXkgY2VydGlmaWNhdGUgdG8gYmUgdXNlZCB3aGVuIHNpZ25pbmdcbiAgICogdGhlIGNsYWltcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGNsYWltcyAtIGFkZGl0aW9uYWwgY2xhaW1zIHRvIGluY2x1ZGUgd2l0aGluIHRoZSBnZW5lcmF0ZWRcbiAgICogSldULlxuICAgKlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZ2VuZXJhdGVkIHRva2VuXG4gICAqL1xuICBnZW5lcmF0ZShjZXJ0LCBjbGFpbXMgPSB7fSkge1xuICAgIGlmICghKGNlcnQgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjZXJ0IG11c3QgYmUgb2YgdHlwZSBCdWZmZXJcIik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY2xhaW1zICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjbGFpbXMgbXVzdCBiZSBvZiB0eXBlIG9iamVjdFwiKTtcbiAgICB9XG5cbiAgICB2YXIgdG9TaWduID0ge1xuICAgICAgaWF0OiBjbGFpbXMuaXNzdWVkQXQgfHwgcGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDAsIDEwKSxcbiAgICAgIGp0aTogY2xhaW1zLmp0aSB8fCB1dWlkLnYxKClcbiAgICB9O1xuICAgIE9iamVjdC5rZXlzKGNsYWltcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgdG9TaWduW2tleV0gPSBjbGFpbXNba2V5XTtcbiAgICB9KTtcblxuICAgIHZhciB0b2tlbiA9IGp3dC5zaWduKHRvU2lnbiwgY2VydCwgeyBhbGdvcml0aG06IFwiUlMyNTZcIiB9KTtcbiAgICByZXR1cm4gdG9rZW47XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBKd3RHZW5lcmF0b3I7XG4iXX0=