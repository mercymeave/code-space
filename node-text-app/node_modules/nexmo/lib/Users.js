"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require("./index");

var _index2 = _interopRequireDefault(_index);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides access to the `users` endpoint.
 */
var Users = function () {
  _createClass(Users, null, [{
    key: "PATH",
    get: function get() {
      return "/beta/users";
    }
  }, {
    key: "BETA2_PATH",
    get: function get() {
      return "/beta2/users";
    }

    /**
     * @param {Credentials} credentials
     *    credentials to be used when interacting with the API.
     * @param {Object} options
     *    Additional Users options.
     */

  }]);

  function Users(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Users);

    this.creds = credentials;
    this.options = options;
  }

  /**
   * Create a new user.
   *
   * @param {Object} params - Parameters used when creating the user. See https://ea.developer.nexmo.com/api/conversation#create-a-user for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  _createClass(Users, [{
    key: "create",
    value: function create(params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: Users.PATH,
        method: "POST",
        body: params,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Get an existing user.
     *
     * @param {string|object} query - The unique identifier for the user to retrieve
     *               or a set of filter parameters for the query. For more information
     *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "get",
    value: function get(query, callback) {
      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: _Utils2.default.createPathWithQuery(Users.BETA2_PATH, query),
        method: "GET",
        body: undefined,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Get next page of users or conversations for a user.
     *
     * @param {object} response - The response from a paginated users or conversations list
     *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "next",
    value: function next(response, callback) {
      if (response._links.next) {
        var userId = response._links.next.href.match(/USR-[^/]*/g);
        if (userId) {
          this.getConversations(userId[0], _Utils2.default.getQuery(response._links.next.href), callback);
        } else {
          this.get(_Utils2.default.getQuery(response._links.next.href), callback);
        }
      } else {
        var error = new Error("The response doesn't have a next page.");
        callback(error, null);
      }
    }

    /**
     * Get previous page of users or conversations for a user.
     *
     * @param {object} response - The response from a paginated users or conversations list
     *               see https://ea.developer.nexmo.com/api/conversation#retrieve-all-users
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "prev",
    value: function prev(response, callback) {
      if (response._links.prev) {
        var userId = response._links.prev.href.match(/USR-[^/]*/g);
        if (userId) {
          this.getConversations(userId[0], _Utils2.default.getQuery(response._links.prev.href), callback);
        } else {
          this.get(_Utils2.default.getQuery(response._links.prev.href), callback);
        }
      } else {
        var error = new Error("The response doesn't have a previous page.");
        callback(error, null);
      }
    }

    /**
     * Get an conversations for an existing user.
     *
     * @param {string} userId - The unique identifier for the user to retrieve conversations for
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "getConversations",
    value: function getConversations(userId, query, callback) {
      // backwards compatibility to 2.5.4-beta-1. Remove for 3.0.0
      if (typeof query === "function") {
        callback = query;
        query = {};
      }

      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: _Utils2.default.createPathWithQuery(Users.BETA2_PATH + "/" + userId + "/conversations", query),
        method: "GET",
        body: undefined,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Update an existing user.
     *
     * @param {string} userId - The unique identifier for the user to update.
     * @param {Object} params - Parameters used when updating the conversation.
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "update",
    value: function update(userId, params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: Users.PATH + "/" + userId,
        method: "PUT",
        body: params,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };

      this.options.httpClient.request(config, callback);
    }

    /**
     * Deleta an existing user.
     *
     * @param {string} userId - The unique identifier for the user to delete.
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "delete",
    value: function _delete(userId, callback) {
      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: Users.PATH + "/" + userId,
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };

      this.options.httpClient.request(config, callback);
    }
  }]);

  return Users;
}();

exports.default = Users;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,