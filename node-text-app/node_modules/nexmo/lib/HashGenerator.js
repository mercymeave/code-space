"use strict";

var crypto = require("crypto");

class HashGenerator {
  /**
   * Generate a Signature Hash.
   *
   * @param {String} method - the method to be used when creating the hash
   * @param {String} secret - the secret to be used when creating the hash
   * @param {Object} params - params to generate hash from
   *
   * @returns {String} the generated token
   */
  generate(method, secret, params) {
    params = params || {};
    var signedQuery = "";
    params = JSON.parse(JSON.stringify(params));

    if (params.sig) {
      delete params.sig;
    }

    Object.keys(params).sort().forEach(key => {
      // replace & and = with _
      signedQuery += "&" + key + "=" + params[key].replace(/\&|\=/g, "_");
    });
    var hash = "";

    switch (method) {
      case "md5hash":
        signedQuery += secret;
        hash = crypto.createHash("md5").update(signedQuery).digest("hex");
        break;

      case "md5":
      case "sha1":
      case "sha256":
      case "sha512":
        hash = crypto.createHmac(method, secret).update(signedQuery).digest("hex");
        break;

      default:
        throw "Unknown signature algorithm: ".concat(method, ". Expected: md5hash, md5, sha1, sha256, or sha512");
    }

    return hash;
  }

}

module.exports = HashGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9IYXNoR2VuZXJhdG9yLmpzIl0sIm5hbWVzIjpbImNyeXB0byIsInJlcXVpcmUiLCJIYXNoR2VuZXJhdG9yIiwiZ2VuZXJhdGUiLCJtZXRob2QiLCJzZWNyZXQiLCJwYXJhbXMiLCJzaWduZWRRdWVyeSIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsInNpZyIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwiZm9yRWFjaCIsImtleSIsInJlcGxhY2UiLCJoYXNoIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsImRpZ2VzdCIsImNyZWF0ZUhtYWMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7O0FBRUEsTUFBTUMsYUFBTixDQUFvQjtBQUNsQjs7Ozs7Ozs7O0FBU0FDLEVBQUFBLFFBQVEsQ0FBQ0MsTUFBRCxFQUFTQyxNQUFULEVBQWlCQyxNQUFqQixFQUF5QjtBQUMvQkEsSUFBQUEsTUFBTSxHQUFHQSxNQUFNLElBQUksRUFBbkI7QUFDQSxRQUFJQyxXQUFXLEdBQUcsRUFBbEI7QUFFQUQsSUFBQUEsTUFBTSxHQUFHRSxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxTQUFMLENBQWVKLE1BQWYsQ0FBWCxDQUFUOztBQUVBLFFBQUlBLE1BQU0sQ0FBQ0ssR0FBWCxFQUFnQjtBQUNkLGFBQU9MLE1BQU0sQ0FBQ0ssR0FBZDtBQUNEOztBQUVEQyxJQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWVAsTUFBWixFQUNHUSxJQURILEdBRUdDLE9BRkgsQ0FFV0MsR0FBRyxJQUFJO0FBQ2Q7QUFDQVQsTUFBQUEsV0FBVyxJQUFJLE1BQU1TLEdBQU4sR0FBWSxHQUFaLEdBQWtCVixNQUFNLENBQUNVLEdBQUQsQ0FBTixDQUFZQyxPQUFaLENBQW9CLFFBQXBCLEVBQThCLEdBQTlCLENBQWpDO0FBQ0QsS0FMSDtBQU9BLFFBQUlDLElBQUksR0FBRyxFQUFYOztBQUVBLFlBQVFkLE1BQVI7QUFDRSxXQUFLLFNBQUw7QUFDRUcsUUFBQUEsV0FBVyxJQUFJRixNQUFmO0FBQ0FhLFFBQUFBLElBQUksR0FBR2xCLE1BQU0sQ0FDVm1CLFVBREksQ0FDTyxLQURQLEVBRUpDLE1BRkksQ0FFR2IsV0FGSCxFQUdKYyxNQUhJLENBR0csS0FISCxDQUFQO0FBSUE7O0FBQ0YsV0FBSyxLQUFMO0FBQ0EsV0FBSyxNQUFMO0FBQ0EsV0FBSyxRQUFMO0FBQ0EsV0FBSyxRQUFMO0FBQ0VILFFBQUFBLElBQUksR0FBR2xCLE1BQU0sQ0FDVnNCLFVBREksQ0FDT2xCLE1BRFAsRUFDZUMsTUFEZixFQUVKZSxNQUZJLENBRUdiLFdBRkgsRUFHSmMsTUFISSxDQUdHLEtBSEgsQ0FBUDtBQUlBOztBQUVGO0FBQ0UscURBQXNDakIsTUFBdEM7QUFuQko7O0FBc0JBLFdBQU9jLElBQVA7QUFDRDs7QUFwRGlCOztBQXVEcEJLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnRCLGFBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcblxuY2xhc3MgSGFzaEdlbmVyYXRvciB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIFNpZ25hdHVyZSBIYXNoLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kIC0gdGhlIG1ldGhvZCB0byBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgdGhlIGhhc2hcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNlY3JldCAtIHRoZSBzZWNyZXQgdG8gYmUgdXNlZCB3aGVuIGNyZWF0aW5nIHRoZSBoYXNoXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBwYXJhbXMgdG8gZ2VuZXJhdGUgaGFzaCBmcm9tXG4gICAqXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBnZW5lcmF0ZWQgdG9rZW5cbiAgICovXG4gIGdlbmVyYXRlKG1ldGhvZCwgc2VjcmV0LCBwYXJhbXMpIHtcbiAgICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gICAgdmFyIHNpZ25lZFF1ZXJ5ID0gXCJcIjtcblxuICAgIHBhcmFtcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocGFyYW1zKSk7XG5cbiAgICBpZiAocGFyYW1zLnNpZykge1xuICAgICAgZGVsZXRlIHBhcmFtcy5zaWc7XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXMocGFyYW1zKVxuICAgICAgLnNvcnQoKVxuICAgICAgLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgLy8gcmVwbGFjZSAmIGFuZCA9IHdpdGggX1xuICAgICAgICBzaWduZWRRdWVyeSArPSBcIiZcIiArIGtleSArIFwiPVwiICsgcGFyYW1zW2tleV0ucmVwbGFjZSgvXFwmfFxcPS9nLCBcIl9cIik7XG4gICAgICB9KTtcblxuICAgIHZhciBoYXNoID0gXCJcIjtcblxuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICBjYXNlIFwibWQ1aGFzaFwiOlxuICAgICAgICBzaWduZWRRdWVyeSArPSBzZWNyZXQ7XG4gICAgICAgIGhhc2ggPSBjcnlwdG9cbiAgICAgICAgICAuY3JlYXRlSGFzaChcIm1kNVwiKVxuICAgICAgICAgIC51cGRhdGUoc2lnbmVkUXVlcnkpXG4gICAgICAgICAgLmRpZ2VzdChcImhleFwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibWQ1XCI6XG4gICAgICBjYXNlIFwic2hhMVwiOlxuICAgICAgY2FzZSBcInNoYTI1NlwiOlxuICAgICAgY2FzZSBcInNoYTUxMlwiOlxuICAgICAgICBoYXNoID0gY3J5cHRvXG4gICAgICAgICAgLmNyZWF0ZUhtYWMobWV0aG9kLCBzZWNyZXQpXG4gICAgICAgICAgLnVwZGF0ZShzaWduZWRRdWVyeSlcbiAgICAgICAgICAuZGlnZXN0KFwiaGV4XCIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgYFVua25vd24gc2lnbmF0dXJlIGFsZ29yaXRobTogJHttZXRob2R9LiBFeHBlY3RlZDogbWQ1aGFzaCwgbWQ1LCBzaGExLCBzaGEyNTYsIG9yIHNoYTUxMmA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc2g7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoR2VuZXJhdG9yO1xuIl19