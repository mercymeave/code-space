"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class Account {
  /**
   * @param {Credentials} credentials
   *    credentials to be used when interacting with the API.
   * @param {Object} options
   *    Addition Account options.
   */
  constructor(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.creds = credentials;
    this.options = options;
  }
  /**
   * TODO: document
   */


  checkBalance(callback) {
    return this.options.rest.get("/account/get-balance", callback);
  }

  updatePassword(newSecret, callback) {
    return this.options.rest.postUseQueryString("/account/settings", {
      newSecret
    }, callback);
  }

  updateSMSCallback(moCallBackUrl, callback) {
    return this.options.rest.postUseQueryString("/account/settings", {
      moCallBackUrl
    }, callback);
  }

  updateDeliveryReceiptCallback(drCallBackUrl, callback) {
    return this.options.rest.postUseQueryString("/account/settings", {
      drCallBackUrl
    }, callback);
  }

  topUp(trx, callback) {
    return this.options.rest.postUseQueryString("/account/top-up", {
      trx
    }, callback);
  }

  listSecrets(apiKey, callback) {
    return this.options.api.get("/accounts/" + apiKey + "/secrets", {}, callback, false, true);
  }

  getSecret(apiKey, id, callback) {
    return this.options.api.get("/accounts/" + apiKey + "/secrets/" + id, {}, callback, false, true);
  }

  createSecret(apiKey, secret, callback) {
    return this.options.api.postJson("/accounts/" + apiKey + "/secrets/", {
      secret: secret
    }, callback, false, true);
  }

  deleteSecret(apiKey, id, callback) {
    return this.options.api.delete("/accounts/" + apiKey + "/secrets/" + id, callback, false, true);
  }

}

var _default = Account;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9BY2NvdW50LmpzIl0sIm5hbWVzIjpbIkFjY291bnQiLCJjb25zdHJ1Y3RvciIsImNyZWRlbnRpYWxzIiwib3B0aW9ucyIsImNyZWRzIiwiY2hlY2tCYWxhbmNlIiwiY2FsbGJhY2siLCJyZXN0IiwiZ2V0IiwidXBkYXRlUGFzc3dvcmQiLCJuZXdTZWNyZXQiLCJwb3N0VXNlUXVlcnlTdHJpbmciLCJ1cGRhdGVTTVNDYWxsYmFjayIsIm1vQ2FsbEJhY2tVcmwiLCJ1cGRhdGVEZWxpdmVyeVJlY2VpcHRDYWxsYmFjayIsImRyQ2FsbEJhY2tVcmwiLCJ0b3BVcCIsInRyeCIsImxpc3RTZWNyZXRzIiwiYXBpS2V5IiwiYXBpIiwiZ2V0U2VjcmV0IiwiaWQiLCJjcmVhdGVTZWNyZXQiLCJzZWNyZXQiLCJwb3N0SnNvbiIsImRlbGV0ZVNlY3JldCIsImRlbGV0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFFQSxNQUFNQSxPQUFOLENBQWM7QUFDWjs7Ozs7O0FBTUFDLEVBQUFBLFdBQVcsQ0FBQ0MsV0FBRCxFQUE0QjtBQUFBLFFBQWRDLE9BQWMsdUVBQUosRUFBSTtBQUNyQyxTQUFLQyxLQUFMLEdBQWFGLFdBQWI7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDRDtBQUVEOzs7OztBQUdBRSxFQUFBQSxZQUFZLENBQUNDLFFBQUQsRUFBVztBQUNyQixXQUFPLEtBQUtILE9BQUwsQ0FBYUksSUFBYixDQUFrQkMsR0FBbEIsQ0FBc0Isc0JBQXRCLEVBQThDRixRQUE5QyxDQUFQO0FBQ0Q7O0FBRURHLEVBQUFBLGNBQWMsQ0FBQ0MsU0FBRCxFQUFZSixRQUFaLEVBQXNCO0FBQ2xDLFdBQU8sS0FBS0gsT0FBTCxDQUFhSSxJQUFiLENBQWtCSSxrQkFBbEIsQ0FDTCxtQkFESyxFQUVMO0FBQUVELE1BQUFBO0FBQUYsS0FGSyxFQUdMSixRQUhLLENBQVA7QUFLRDs7QUFFRE0sRUFBQUEsaUJBQWlCLENBQUNDLGFBQUQsRUFBZ0JQLFFBQWhCLEVBQTBCO0FBQ3pDLFdBQU8sS0FBS0gsT0FBTCxDQUFhSSxJQUFiLENBQWtCSSxrQkFBbEIsQ0FDTCxtQkFESyxFQUVMO0FBQUVFLE1BQUFBO0FBQUYsS0FGSyxFQUdMUCxRQUhLLENBQVA7QUFLRDs7QUFFRFEsRUFBQUEsNkJBQTZCLENBQUNDLGFBQUQsRUFBZ0JULFFBQWhCLEVBQTBCO0FBQ3JELFdBQU8sS0FBS0gsT0FBTCxDQUFhSSxJQUFiLENBQWtCSSxrQkFBbEIsQ0FDTCxtQkFESyxFQUVMO0FBQUVJLE1BQUFBO0FBQUYsS0FGSyxFQUdMVCxRQUhLLENBQVA7QUFLRDs7QUFFRFUsRUFBQUEsS0FBSyxDQUFDQyxHQUFELEVBQU1YLFFBQU4sRUFBZ0I7QUFDbkIsV0FBTyxLQUFLSCxPQUFMLENBQWFJLElBQWIsQ0FBa0JJLGtCQUFsQixDQUNMLGlCQURLLEVBRUw7QUFBRU0sTUFBQUE7QUFBRixLQUZLLEVBR0xYLFFBSEssQ0FBUDtBQUtEOztBQUVEWSxFQUFBQSxXQUFXLENBQUNDLE1BQUQsRUFBU2IsUUFBVCxFQUFtQjtBQUM1QixXQUFPLEtBQUtILE9BQUwsQ0FBYWlCLEdBQWIsQ0FBaUJaLEdBQWpCLENBQ0wsZUFBZVcsTUFBZixHQUF3QixVQURuQixFQUVMLEVBRkssRUFHTGIsUUFISyxFQUlMLEtBSkssRUFLTCxJQUxLLENBQVA7QUFPRDs7QUFFRGUsRUFBQUEsU0FBUyxDQUFDRixNQUFELEVBQVNHLEVBQVQsRUFBYWhCLFFBQWIsRUFBdUI7QUFDOUIsV0FBTyxLQUFLSCxPQUFMLENBQWFpQixHQUFiLENBQWlCWixHQUFqQixDQUNMLGVBQWVXLE1BQWYsR0FBd0IsV0FBeEIsR0FBc0NHLEVBRGpDLEVBRUwsRUFGSyxFQUdMaEIsUUFISyxFQUlMLEtBSkssRUFLTCxJQUxLLENBQVA7QUFPRDs7QUFFRGlCLEVBQUFBLFlBQVksQ0FBQ0osTUFBRCxFQUFTSyxNQUFULEVBQWlCbEIsUUFBakIsRUFBMkI7QUFDckMsV0FBTyxLQUFLSCxPQUFMLENBQWFpQixHQUFiLENBQWlCSyxRQUFqQixDQUNMLGVBQWVOLE1BQWYsR0FBd0IsV0FEbkIsRUFFTDtBQUFFSyxNQUFBQSxNQUFNLEVBQUVBO0FBQVYsS0FGSyxFQUdMbEIsUUFISyxFQUlMLEtBSkssRUFLTCxJQUxLLENBQVA7QUFPRDs7QUFFRG9CLEVBQUFBLFlBQVksQ0FBQ1AsTUFBRCxFQUFTRyxFQUFULEVBQWFoQixRQUFiLEVBQXVCO0FBQ2pDLFdBQU8sS0FBS0gsT0FBTCxDQUFhaUIsR0FBYixDQUFpQk8sTUFBakIsQ0FDTCxlQUFlUixNQUFmLEdBQXdCLFdBQXhCLEdBQXNDRyxFQURqQyxFQUVMaEIsUUFGSyxFQUdMLEtBSEssRUFJTCxJQUpLLENBQVA7QUFNRDs7QUF4Rlc7O2VBMkZDTixPIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNsYXNzIEFjY291bnQge1xuICAvKipcbiAgICogQHBhcmFtIHtDcmVkZW50aWFsc30gY3JlZGVudGlhbHNcbiAgICogICAgY3JlZGVudGlhbHMgdG8gYmUgdXNlZCB3aGVuIGludGVyYWN0aW5nIHdpdGggdGhlIEFQSS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogICAgQWRkaXRpb24gQWNjb3VudCBvcHRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY3JlZGVudGlhbHMsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuY3JlZHMgPSBjcmVkZW50aWFscztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIFRPRE86IGRvY3VtZW50XG4gICAqL1xuICBjaGVja0JhbGFuY2UoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJlc3QuZ2V0KFwiL2FjY291bnQvZ2V0LWJhbGFuY2VcIiwgY2FsbGJhY2spO1xuICB9XG5cbiAgdXBkYXRlUGFzc3dvcmQobmV3U2VjcmV0LCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmVzdC5wb3N0VXNlUXVlcnlTdHJpbmcoXG4gICAgICBcIi9hY2NvdW50L3NldHRpbmdzXCIsXG4gICAgICB7IG5ld1NlY3JldCB9LFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgdXBkYXRlU01TQ2FsbGJhY2sobW9DYWxsQmFja1VybCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJlc3QucG9zdFVzZVF1ZXJ5U3RyaW5nKFxuICAgICAgXCIvYWNjb3VudC9zZXR0aW5nc1wiLFxuICAgICAgeyBtb0NhbGxCYWNrVXJsIH0sXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICB1cGRhdGVEZWxpdmVyeVJlY2VpcHRDYWxsYmFjayhkckNhbGxCYWNrVXJsLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmVzdC5wb3N0VXNlUXVlcnlTdHJpbmcoXG4gICAgICBcIi9hY2NvdW50L3NldHRpbmdzXCIsXG4gICAgICB7IGRyQ2FsbEJhY2tVcmwgfSxcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIHRvcFVwKHRyeCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJlc3QucG9zdFVzZVF1ZXJ5U3RyaW5nKFxuICAgICAgXCIvYWNjb3VudC90b3AtdXBcIixcbiAgICAgIHsgdHJ4IH0sXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICBsaXN0U2VjcmV0cyhhcGlLZXksIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5hcGkuZ2V0KFxuICAgICAgXCIvYWNjb3VudHMvXCIgKyBhcGlLZXkgKyBcIi9zZWNyZXRzXCIsXG4gICAgICB7fSxcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgZmFsc2UsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgfVxuXG4gIGdldFNlY3JldChhcGlLZXksIGlkLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYXBpLmdldChcbiAgICAgIFwiL2FjY291bnRzL1wiICsgYXBpS2V5ICsgXCIvc2VjcmV0cy9cIiArIGlkLFxuICAgICAge30sXG4gICAgICBjYWxsYmFjayxcbiAgICAgIGZhbHNlLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gIH1cblxuICBjcmVhdGVTZWNyZXQoYXBpS2V5LCBzZWNyZXQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5hcGkucG9zdEpzb24oXG4gICAgICBcIi9hY2NvdW50cy9cIiArIGFwaUtleSArIFwiL3NlY3JldHMvXCIsXG4gICAgICB7IHNlY3JldDogc2VjcmV0IH0sXG4gICAgICBjYWxsYmFjayxcbiAgICAgIGZhbHNlLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gIH1cblxuICBkZWxldGVTZWNyZXQoYXBpS2V5LCBpZCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwaS5kZWxldGUoXG4gICAgICBcIi9hY2NvdW50cy9cIiArIGFwaUtleSArIFwiL3NlY3JldHMvXCIgKyBpZCxcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgZmFsc2UsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBY2NvdW50O1xuIl19