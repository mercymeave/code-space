"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _querystring = _interopRequireDefault(require("querystring"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Media {
  static get PATH() {
    return "/v3/media";
  }

  constructor(credentials, options) {
    this.creds = credentials;
    this.options = options;
  }

  upload(opts, callback) {
    opts = opts || {};

    if (!opts.file && !opts.url) {
      throw new Error("You must provide either 'file' or 'url' to upload a file");
    }

    if (opts.file) {
      opts.file = _fs.default.createReadStream(opts.file);
    }

    return this.options.api.postFile(Media.PATH, opts, function (err, response, body) {
      if (err) {
        return callback(err);
      }

      var location = "";

      if (response && response.headers) {
        location = response.headers.location;
      }

      return callback(null, location);
    }, true);
  }

  search(options, callback) {
    if (typeof options == "function" && !callback) {
      callback = options;
      options = {};
    }

    options = options || {};
    return this._makeRequest("GET", Media.PATH, options, {}, callback);
  } // If If-Modified-Since header is provided and the data hasn't changed, the
  // user will receive an empty body in the callback, NOT an error


  download(id, headers, callback) {
    if (!callback && typeof headers == "function") {
      callback = headers;
      headers = {};
    }

    return this._makeRequest("GET", "".concat(Media.PATH, "/").concat(id), {}, headers, callback, true);
  }

  delete(id, callback) {
    return this._makeRequest("DELETE", "".concat(Media.PATH, "/").concat(id), {}, {}, callback);
  }

  get(id, callback) {
    return this._makeRequest("GET", "".concat(Media.PATH, "/").concat(id, "/info"), {}, {}, callback);
  }

  update(id, opts, callback) {
    return this._makeRequest("PUT", "".concat(Media.PATH, "/").concat(id, "/info"), opts, {}, callback);
  }

  _makeRequest(verb, path, options, headers, callback, skipJsonParsing) {
    headers = Object.assign({
      "Content-Type": "application/json",
      Authorization: "Bearer ".concat(this.creds.generateJwt())
    }, headers);
    var req = {};

    if (verb.toUpperCase() === "GET") {
      if (Object.keys(options).length) {
        path = path + "?" + _querystring.default.stringify(options);
      }
    } else {
      req["body"] = JSON.stringify(options);
    }

    req["path"] = path;
    req["headers"] = headers;
    return this.options.api.request(req, verb, callback, skipJsonParsing);
  }

}

var _default = Media;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,