"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require("./index");

var _index2 = _interopRequireDefault(_index);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides access to the `members` resource.
 */
var Members = function () {
  _createClass(Members, null, [{
    key: "PATH",

    /**
     * The path to the `members` resource.
     */
    get: function get() {
      return "/beta/conversations/{conversation_uuid}/members";
    }
  }, {
    key: "BETA2_PATH",
    get: function get() {
      return "/beta2/conversations/{conversation_uuid}/members";
    }

    /**
     * Creates a new Members.
     *
     * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.
     * @param {Object} options - additional options for the class.
     */

  }]);

  function Members(creds, options) {
    _classCallCheck(this, Members);

    this.creds = creds;
    this.options = options;
  }

  /**
   * Creates a member in a conversation.
   *
   * @param {string} conversationId - The unique identifier for the conversation
   * @param {Object} params - Parameters used when adding a member to the conversation. See https://ea.developer.nexmo.com/api/conversation#add-a-user-to-a-conversation for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  _createClass(Members, [{
    key: "create",
    value: function create(conversationId, params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: Members.PATH.replace("{conversation_uuid}", conversationId),
        method: "POST",
        body: params,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    // backwards compatibility to 2.4.0-beta1. Remove for 3.0.0

  }, {
    key: "add",
    value: function add(conversationId, params, callback) {
      this.create(conversationId, params, callback);
    }

    /**
     * Get an existing member.
     *
     * @param {string} conversationId - The unique identifier for the conversation
     * @param {string|object} query - The unique identifier for the member to retrieve
     *               or a set of filter parameters for the query. For more information
     *               see https://ea.developer.nexmo.com/api/conversation#retrieve-members-of-a-conversation
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "get",
    value: function get(conversationId, query, callback) {
      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: _Utils2.default.createPathWithQuery(Members.BETA2_PATH.replace("{conversation_uuid}", conversationId), query),
        method: "GET",
        body: undefined,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Get next page of members for a conversation.
     *
     * @param {object} response - The response from a paginated members list
     *               see https://ea.developer.nexmo.com/api/conversation#getMembers
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "next",
    value: function next(response, callback) {
      if (response._links.next) {
        var conversationId = response._links.next.href.match(/CON-[^/]*/g);
        this.get(conversationId, _Utils2.default.getQuery(response._links.next.href), callback);
      } else {
        var error = new Error("The response doesn't have a next page.");
        callback(error, null);
      }
    }

    /**
     * Get previous page members for a conversation.
     *
     * @param {object} response - The response from a paginated members list
     *               see https://ea.developer.nexmo.com/api/conversation#getMembers
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "prev",
    value: function prev(response, callback) {
      if (response._links.prev) {
        var conversationId = response._links.prev.href.match(/CON-[^/]*/g);
        this.get(conversationId, _Utils2.default.getQuery(response._links.prev.href), callback);
      } else {
        var error = new Error("The response doesn't have a previous page.");
        callback(error, null);
      }
    }

    /**
     * Update an existing member.
     *
     * @param {string} conversationId - The unique identifier for the conversation to update the member in.
     * @param {string} memberId - The unique identifier for the member to update.
     * @param {Object} params - Parameters used when updating the member.
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "update",
    value: function update(conversationId, memberId, params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: Members.PATH.replace("{conversation_uuid}", conversationId) + "/" + memberId,
        method: "PUT",
        body: params,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };

      this.options.httpClient.request(config, callback);
    }

    /**
     * Deleta an existing member.
     *
     * @param {string} conversationId- The unique identifier for the conversation to delete the member from.
     * @param {string} memberId - The unique identifier for the member to delete.
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "delete",
    value: function _delete(conversationId, memberId, callback) {
      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: Members.PATH.replace("{conversation_uuid}", conversationId) + "/" + memberId,
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };

      this.options.httpClient.request(config, callback);
    }
  }]);

  return Members;
}();

exports.default = Members;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,