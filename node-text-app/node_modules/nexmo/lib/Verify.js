"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Utils = _interopRequireDefault(require("./Utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Verify {
  static get PATH() {
    return "/verify{action}/json";
  }

  static get ERROR_MESSAGES() {
    return {
      verifyValidation: "Missing Mandatory fields (number and/or brand)",
      checkVerifyValidation: "Missing Mandatory fields (request_id and/or code)",
      controlVerifyValidation: "Missing Mandatory fields (request_id and/or cmd-command)",
      searchVerifyValidation: "Missing Mandatory fields (request_id or request_ids)"
    };
  }
  /**
   * @param {Credentials} credentials
   *    credentials to be used when interacting with the API.
   * @param {Object} options
   *    Addition Verify options.
   */


  constructor(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.creds = credentials;
    this.options = options;
  }
  /**
   * TODO: document
   */


  request(inputParams, callback) {
    if (!inputParams.number || !inputParams.brand) {
      _Utils.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.verifyValidation));
    } else {
      inputParams["api_key"] = this.creds.apiKey;
      inputParams["api_secret"] = this.creds.apiSecret;
      this.options.httpClient.request({
        host: this.options.apiHost || "api.nexmo.com",
        path: _Utils.default.createPathWithQuery("".concat(Verify.PATH.replace("{action}", "")), inputParams)
      }, callback);
    }
  }
  /**
   * TODO: document
   */


  psd2(inputParams, callback) {
    inputParams["api_key"] = this.creds.apiKey;
    inputParams["api_secret"] = this.creds.apiSecret;
    this.options.httpClient.request({
      host: this.options.apiHost || "api.nexmo.com",
      path: _Utils.default.createPathWithQuery("".concat(Verify.PATH.replace("{action}", "/psd2")), inputParams)
    }, callback);
  }
  /**
   * TODO: document
   */


  check(inputParams, callback) {
    if (!inputParams.request_id || !inputParams.code) {
      _Utils.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.checkVerifyValidation));
    } else {
      inputParams["api_key"] = this.creds.apiKey;
      inputParams["api_secret"] = this.creds.apiSecret;
      this.options.httpClient.request({
        host: this.options.apiHost || "api.nexmo.com",
        path: _Utils.default.createPathWithQuery("".concat(Verify.PATH.replace("{action}", "/check")), inputParams)
      }, callback);
    }
  }
  /**
   * TODO: document
   */


  control(inputParams, callback) {
    if (!inputParams.request_id || !inputParams.cmd) {
      _Utils.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.controlVerifyValidation));
    } else {
      inputParams["api_key"] = this.creds.apiKey;
      inputParams["api_secret"] = this.creds.apiSecret;
      this.options.httpClient.request({
        host: this.options.apiHost || "api.nexmo.com",
        path: _Utils.default.createPathWithQuery("".concat(Verify.PATH.replace("{action}", "/control")), inputParams)
      }, callback);
    }
  }
  /**
   * TODO: document
   */


  search(requestIds, callback) {
    var requestIdParam = {};

    if (!requestIds) {
      _Utils.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.searchVerifyValidation));
    } else {
      if (Array.isArray(requestIds)) {
        if (requestIds.length === 1) {
          requestIdParam.request_id = requestIds;
        } else {
          requestIdParam.request_ids = requestIds;
        }
      } else {
        requestIdParam.request_id = requestIds;
      }

      requestIdParam["api_key"] = this.creds.apiKey;
      requestIdParam["api_secret"] = this.creds.apiSecret;
      this.options.httpClient.request({
        host: this.options.apiHost || "api.nexmo.com",
        path: _Utils.default.createPathWithQuery("".concat(Verify.PATH.replace("{action}", "/search")), requestIdParam)
      }, callback);
    }
  }

}

var _default = Verify;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,